name: ci-test-multi-jobs
on:
  # pull_request
  workflow_dispatch:

  push:
    branches-ignore:
      - 'qualif/**'
      - 'develop'
      - 'master'
  # pull_request:
  #   branches:
  #     - '!qualif/**'
  #     - '!develop'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
env:
  DOCKER_COMPOSE_VERSION: 1.19.0
  # DOCKER_VERSION: 18.06.0-ce
  DOCKER_VERSION: 5:19.03.11~3-0~ubuntu-bionic
  DOCKER_PWD: ${{ secrets.DOCKER_PWD }}
  DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}

jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        components: [
          {
            name: "api",
            image: "candilib_api"
          },
          {
            name: "front-admin",
            image: "candilib_front_admin",
          },
          {
            name: "front-candidat",
            image: "candilib_front_candidat"
          },
          {
            name: "db",
            image: "mongo"
          },
          {
            name: "e2e",
            image: "candilib_e2e",
            arg: "e2e"
          },
          {
            name: "e2e",
            arg: 'db-rest',
            image: "candilib-db-rest"
          }
        ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: install docker-ce
        run: |
          # sudo apt-get remove docker docker-engine docker.io containerd runc
          sudo apt-get update
          # sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          # sudo apt-get install docker-ce docker-ce-cli containerd.io
          # sudo apt-get install docker-ce
          # apt-cache madison docker-ce
          sudo apt-get install docker-ce="$DOCKER_VERSION" docker-ce-cli="$DOCKER_VERSION" containerd.io
          type -a docker-compose && docker-compose version
          docker version
      - name: install dependency
        run: |
          sudo apt-get install -qy make apt-transport-https ca-certificates curl software-properties-common gawk jq parallel curl language-pack-fr
      - name: run test
        run: |
          ( git fetch --unshallow || true ) && git tag -l --sort=creatordate | tail -1
          ci/docker-access.sh
          ci/run-tests-${{ matrix.components.name }}.sh ${{ matrix.components.arg }}
      - name: Upload image
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: '${{ matrix.components.image }}'
      - name: end
        run: |
          docker logout

  prepare_test:
    runs-on: ubuntu-18.04
    needs: build
    outputs:
      testFiles: ${{ steps.getTeste2e.outputs.test }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: get test-e2e
        id: getTeste2e
        run: |
          TESTFILES=$(jq '.testFiles' client/cypress.json)
          echo ${TESTFILES}
          echo ::set-output name=test::${TESTFILES}

  test-e2e:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    needs: [
      prepare_test,
      build
      ]

    strategy:
      matrix:
        testFile: ${{ fromJSON(needs.prepare_test.outputs.testFiles) }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: install docker-ce
        run: |
          # sudo apt-get remove docker docker-engine docker.io containerd runc
          sudo apt-get update
          # sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          # sudo apt-get install docker-ce docker-ce-cli containerd.io
          # sudo apt-get install docker-ce
          # apt-cache madison docker-ce
          sudo apt-get install docker-ce="$DOCKER_VERSION" docker-ce-cli="$DOCKER_VERSION" containerd.io
          type -a docker-compose && docker-compose version
          docker version
      - name: install dependency
        run: |
          sudo apt-get install -qy make apt-transport-https ca-certificates curl software-properties-common gawk jq parallel curl language-pack-fr
      - name: Download image db
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: 'mongo'
      - name: Download image api
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: 'candilib_api'
      - name: Download image front admin
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: 'candilib_front_admin'
      - name: Download image front candidat
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: 'candilib_front_candidat'
      - name: Download image front db_rest
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: 'candilib-db-rest'
      - name: Download image e2e
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: 'candilib_e2e'
      - name: run test
        run: |
          ( git fetch --unshallow || true ) && git tag -l --sort=creatordate | tail -1
          ci/docker-access.sh
          ci/run-tests-only.sh ${{ matrix.testFile }}
      - name: store screenshots
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: screenshot test_e2e
          path: client/tests/e2e/screenshots
          retention-days: 1
      - name: end
        run: |
          make clean-images clean-dir
          docker logout
  deploy:
    runs-on: ubuntu-18.04
    needs: [
      prepare_test,
      build,
      test-e2e
      ]
    if: startsWith(github.head_ref, 'qualif/')
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: install docker-ce
        run: |
          # sudo apt-get remove docker docker-engine docker.io containerd runc
          sudo apt-get update
          # sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          # sudo apt-get install docker-ce docker-ce-cli containerd.io
          # sudo apt-get install docker-ce
          # apt-cache madison docker-ce
          sudo apt-get install docker-ce="$DOCKER_VERSION" docker-ce-cli="$DOCKER_VERSION" containerd.io
          type -a docker-compose && docker-compose version
          docker version
      - name: install dependency
        run: |
          sudo apt-get install -qy make apt-transport-https ca-certificates curl software-properties-common gawk jq parallel curl language-pack-fr
      - name: Download image db
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: 'mongo'
      - name: Download image api
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: 'candilib_api'
      - name: Download image front admin
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: 'candilib_front_admin'
      - name: Download image front candidat
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: 'candilib_front_candidat'
      - name: deploy
        env:
          HEROKU_TOKEN: ${{secrets.HEROKU_TOKEN}}
          HEROKU_EMAIL: ${{secrets.HEROKU_EMAIL}}
          NETLIFY_AUTH_TOKEN: ${{secrets.NETLIFY_AUTH_TOKEN}}
          HEROKU_APP_TEST: ${{secrets.HEROKU_APP_TEST}}
          HEROKU_APP_QUALIF: ${{secrets.HEROKU_APP_QUALIF}}
          HEROKU_APP_DEV: ${{secrets.HEROKU_APP_DEV}}
          SLACK_CHANNEL: ${{secrets.SLACK_CHANNEL}}
          SLACK_WEBHOOK: ${{secrets.SLACK_WEBHOOK}}
        run: |
          ci/deploy.sh qualif $TRAVIS_BRANCH
      - name: end
        run: |
          make clean-images clean-dir
          docker logout
  clean:
    runs-on: ubuntu-18.04
    if: ${{ always() }}
    needs: [ test-e2e, deploy]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            action_image_artifact_candilib_front_candidat
            action_image_artifact_candilib_api
            action_image_artifact_candilib_front_admin
            action_image_artifact_mongo
            action_image_artifact_candilib-db-rest
            action_image_artifact_candilib_e2e

